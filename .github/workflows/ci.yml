name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short
  RUSTFLAGS: "-D warnings"
  RUSTUP_MAX_RETRIES: 10

jobs:
  # Run cargo fmt --check
  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - run: cargo fmt --all -- --check

  # Run cargo clippy -- -D warnings
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - run: cargo clippy --all-targets --all-features -- -D warnings

  # Run tests on multiple platforms
  test:
    name: Test - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]
        include:
          # Test other Rust channels on Linux
          - os: ubuntu-latest
            rust: beta
          - os: ubuntu-latest
            rust: nightly
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      - uses: Swatinem/rust-cache@v2
      
      # Install mosquitto for tests
      - name: Install mosquitto (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y mosquitto mosquitto-clients
          sudo systemctl start mosquitto
      
      - name: Install mosquitto (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install mosquitto
          brew services start mosquitto
      
      - name: Install mosquitto (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install mosquitto -y
          Start-Service mosquitto
        shell: pwsh
      
      - name: Run tests
        run: cargo test --all-features
      
      - name: Run doc tests
        run: cargo test --doc

  # Verify project compiles with no default features
  minimal:
    name: Minimal
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo check --no-default-features

  # Check for security vulnerabilities
  security:
    name: Security audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: rustsec/audit-check@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  # Build documentation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: -D warnings

  # Quick build check for our primary targets
  build-check:
    name: Build Check - ${{ matrix.platform.target }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use_cross: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4
      
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}
      
      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform.target }}
      
      - name: Install cross
        if: matrix.platform.use_cross
        run: cargo install cross --locked
      
      - name: Build
        run: |
          if [[ "${{ matrix.platform.use_cross }}" == "true" ]]; then
            cross build --target ${{ matrix.platform.target }}
          else
            cargo build --target ${{ matrix.platform.target }}
          fi
        shell: bash

  # Success gate for branch protection
  ci-success:
    name: CI Success
    if: success()
    needs:
      - fmt
      - clippy
      - test
      - minimal
      - security
      - docs
      - build-check
    runs-on: ubuntu-latest
    steps:
      - name: CI succeeded
        run: exit 0