name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'

permissions:
  contents: write

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tag
        id: tag_version
        run: |
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.tag_version.outputs.version }}
          draft: true
          prerelease: ${{ contains(steps.tag_version.outputs.version, '-') }}

  build-release:
    name: Build Release - ${{ matrix.platform.os-name }}
    needs: create-release
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          # Linux targets
          - os-name: Linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use_cross: false
          
          - os-name: Linux-x86_64-musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use_cross: true
          
          - os-name: Linux-aarch64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use_cross: true
          
          - os-name: Linux-arm
            os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            use_cross: true
          
          - os-name: Linux-i686
            os: ubuntu-latest
            target: i686-unknown-linux-gnu
            use_cross: true
          
          # Windows targets
          - os-name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            use_cross: false
          
          - os-name: Windows-aarch64
            os: windows-latest
            target: aarch64-pc-windows-msvc
            use_cross: false
          
          # macOS targets
          - os-name: macOS-x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            use_cross: false
          
          - os-name: macOS-aarch64
            os: macos-latest
            target: aarch64-apple-darwin
            use_cross: false

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}
      
      - name: Setup Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform.target }}
      
      # Use houseabsolute/actions-rust-cross for cross-compilation
      - name: Build with cross
        if: matrix.platform.use_cross
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: ${{ matrix.platform.target }}
          args: "--locked --release"
          strip: true
      
      # Native compilation for same-architecture targets
      - name: Build native
        if: ${{ !matrix.platform.use_cross }}
        env:
          RUSTFLAGS: "-A dead_code"
        run: cargo build --locked --release --target ${{ matrix.platform.target }}
      
      # Strip binaries to reduce size (for native builds)
      - name: Strip binaries (Unix)
        if: ${{ !matrix.platform.use_cross && matrix.platform.os != 'windows-latest' }}
        run: |
          strip target/${{ matrix.platform.target }}/release/aetheric-agent
          strip target/${{ matrix.platform.target }}/release/aetheric
      
      - name: Get version from tag
        id: tag_version
        shell: bash
        run: |
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Package binaries
        id: package
        shell: bash
        run: |
          # Setup variables
          binary_name="aetheric"
          agent_name="aetheric-agent"
          version="${{ steps.tag_version.outputs.version }}"
          dirname="${binary_name}-${version}-${{ matrix.platform.target }}"
          
          # Create package directory
          mkdir -p "$dirname"
          
          # Copy binaries
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            cp "target/${{ matrix.platform.target }}/release/${binary_name}.exe" "$dirname/"
            cp "target/${{ matrix.platform.target }}/release/${agent_name}.exe" "$dirname/"
          else
            cp "target/${{ matrix.platform.target }}/release/${binary_name}" "$dirname/"
            cp "target/${{ matrix.platform.target }}/release/${agent_name}" "$dirname/"
          fi
          
          # Copy additional files
          cp README.md LICENSE "$dirname/"
          cp -r examples "$dirname/" || true
          
          # Create archive
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            7z a "${dirname}.zip" "$dirname"
            echo "asset=${dirname}.zip" >> $GITHUB_OUTPUT
            echo "asset_content_type=application/zip" >> $GITHUB_OUTPUT
          else
            tar -czf "${dirname}.tar.gz" "$dirname"
            echo "asset=${dirname}.tar.gz" >> $GITHUB_OUTPUT
            echo "asset_content_type=application/gzip" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ steps.package.outputs.asset }}
          asset_name: ${{ steps.package.outputs.asset }}
          asset_content_type: ${{ steps.package.outputs.asset_content_type }}

  build-installers:
    name: Build Installation Scripts
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tag
        id: tag_version
        run: |
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Create installation scripts
        run: |
          mkdir -p installers
          
          # Create Linux/macOS installer
          cat > installers/install.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Aetheric Edge Installation Script
          REPO="Aetheric-Technology/Aetheric-Edge"
          VERSION="${1:-latest}"
          
          # Colors
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          NC='\033[0m'
          
          info() { echo -e "${GREEN}[INFO]${NC} $1"; }
          warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
          error() { echo -e "${RED}[ERROR]${NC} $1"; exit 1; }
          
          # Check if running as root
          if [[ $EUID -ne 0 ]]; then
             error "This script must be run as root (use sudo)"
          fi
          
          # Detect platform
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m)
          
          case "$OS-$ARCH" in
            linux-x86_64)
              TARGET="x86_64-unknown-linux-gnu"
              ;;
            linux-aarch64|linux-arm64)
              TARGET="aarch64-unknown-linux-gnu"
              ;;
            linux-armv7l)
              TARGET="armv7-unknown-linux-gnueabihf"
              ;;
            darwin-x86_64)
              TARGET="x86_64-apple-darwin"
              ;;
            darwin-arm64|darwin-aarch64)
              TARGET="aarch64-apple-darwin"
              ;;
            *)
              error "Unsupported platform: $OS-$ARCH"
              ;;
          esac
          
          info "Detected platform: $OS-$ARCH ($TARGET)"
          
          # Get download URL
          if [[ "$VERSION" == "latest" ]]; then
            DOWNLOAD_URL=$(curl -s "https://api.github.com/repos/$REPO/releases/latest" \
              | grep -o "\"browser_download_url\":[[:space:]]*\"[^\"]*${TARGET}[^\"]*\.tar\.gz\"" \
              | cut -d'"' -f4)
          else
            DOWNLOAD_URL="https://github.com/$REPO/releases/download/$VERSION/aetheric-$VERSION-$TARGET.tar.gz"
          fi
          
          if [[ -z "$DOWNLOAD_URL" ]]; then
            error "Could not find release for platform $TARGET"
          fi
          
          info "Downloading from: $DOWNLOAD_URL"
          
          # Download and install
          TEMP_DIR=$(mktemp -d)
          cd "$TEMP_DIR"
          
          curl -L -o aetheric.tar.gz "$DOWNLOAD_URL"
          tar -xzf aetheric.tar.gz
          
          # Find extracted directory
          EXTRACTED_DIR=$(find . -name "aetheric-*" -type d | head -n1)
          
          # Install binaries
          install -m 755 "$EXTRACTED_DIR/aetheric" /usr/local/bin/
          install -m 755 "$EXTRACTED_DIR/aetheric-agent" /usr/local/bin/
          
          # Create config directory
          mkdir -p /etc/aetheric-edge
          
          # Copy example config if it exists
          if [[ -f "$EXTRACTED_DIR/examples/aetheric.toml" ]]; then
            cp "$EXTRACTED_DIR/examples/aetheric.toml" /etc/aetheric-edge/
          fi
          
          # Cleanup
          cd /
          rm -rf "$TEMP_DIR"
          
          info "Aetheric Edge installed successfully!"
          info "Binaries installed to: /usr/local/bin/"
          info "Config directory: /etc/aetheric-edge/"
          EOF
          
          chmod +x installers/install.sh
          
          # Create Windows installer
          cat > installers/install.ps1 << 'EOF'
          # Aetheric Edge Windows Installation Script
          param(
              [string]$Version = "latest",
              [string]$InstallDir = "$env:ProgramFiles\AethericEdge"
          )
          
          $ErrorActionPreference = "Stop"
          $REPO = "Aetheric-Technology/Aetheric-Edge"
          
          function Write-Info { Write-Host "[INFO] $args" -ForegroundColor Green }
          function Write-Error { Write-Host "[ERROR] $args" -ForegroundColor Red; exit 1 }
          
          # Check admin
          $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
          $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
          if (-not $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
              Write-Error "This script must be run as Administrator"
          }
          
          # Detect architecture
          $arch = if ([Environment]::Is64BitOperatingSystem) { "x86_64" } else { Write-Error "32-bit Windows not supported" }
          $target = "x86_64-pc-windows-msvc"
          
          Write-Info "Installing Aetheric Edge for Windows ($target)"
          
          # Get download URL
          if ($Version -eq "latest") {
              $release = Invoke-RestMethod -Uri "https://api.github.com/repos/$REPO/releases/latest"
              $asset = $release.assets | Where-Object { $_.name -like "*$target*.zip" }
              $downloadUrl = $asset.browser_download_url
          } else {
              $downloadUrl = "https://github.com/$REPO/releases/download/$Version/aetheric-$Version-$target.zip"
          }
          
          Write-Info "Downloading from: $downloadUrl"
          
          # Download and extract
          $tempDir = New-TemporaryFile | ForEach-Object { Remove-Item $_; New-Item -ItemType Directory -Path $_ }
          $zipPath = Join-Path $tempDir "aetheric.zip"
          
          Invoke-WebRequest -Uri $downloadUrl -OutFile $zipPath
          Expand-Archive -Path $zipPath -DestinationPath $tempDir
          
          # Find extracted directory
          $extractedDir = Get-ChildItem -Path $tempDir -Directory | Where-Object { $_.Name -like "aetheric-*" } | Select-Object -First 1
          
          # Create install directory
          New-Item -ItemType Directory -Path $InstallDir -Force | Out-Null
          
          # Copy files
          Copy-Item -Path "$($extractedDir.FullName)\*.exe" -Destination $InstallDir -Force
          
          # Add to PATH
          $currentPath = [Environment]::GetEnvironmentVariable("PATH", "Machine")
          if ($currentPath -notlike "*$InstallDir*") {
              [Environment]::SetEnvironmentVariable("PATH", "$currentPath;$InstallDir", "Machine")
              Write-Info "Added $InstallDir to PATH"
          }
          
          # Cleanup
          Remove-Item -Path $tempDir -Recurse -Force
          
          Write-Info "Aetheric Edge installed successfully to $InstallDir"
          Write-Info "Restart your terminal to use 'aetheric' and 'aetheric-agent' commands"
          EOF
      
      - name: Create installer archive
        run: |
          tar -czf installers.tar.gz installers/
      
      - name: Upload installer scripts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: installers.tar.gz
          asset_name: installers.tar.gz
          asset_content_type: application/gzip

  publish-release:
    name: Publish Release
    needs: [create-release, build-release, build-installers]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version from tag
        id: tag_version
        run: |
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Update release notes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const release_id = '${{ needs.create-release.outputs.release_id }}';
            const version = '${{ steps.tag_version.outputs.version }}';
            
            const body = `## Installation
            
            ### Quick Install
            
            **Linux/macOS:**
            \`\`\`bash
            curl -fsSL https://github.com/${owner}/${repo}/releases/download/${version}/installers.tar.gz | tar -xz && sudo bash installers/install.sh ${version}
            \`\`\`
            
            **Windows (PowerShell as Administrator):**
            \`\`\`powershell
            Invoke-WebRequest -Uri "https://github.com/${owner}/${repo}/releases/download/${version}/installers.tar.gz" -OutFile installers.tar.gz
            tar -xzf installers.tar.gz
            .\\installers\\install.ps1 -Version ${version}
            \`\`\`
            
            ### Manual Installation
            
            Download the appropriate binary archive for your platform from the assets below.
            
            ### Supported Platforms
            
            - **Linux**: x86_64, aarch64 (ARM64), armv7, i686, musl
            - **Windows**: x86_64, aarch64 (ARM64)
            - **macOS**: x86_64 (Intel), aarch64 (Apple Silicon)
            
            ## What's Changed
            
            See the full changelog below.`;
            
            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id,
              body,
              draft: false,
            });

  # Optional: Publish to crates.io
  publish-crates:
    name: Publish to crates.io
    needs: publish-release
    runs-on: ubuntu-latest
    if: "!contains(github.ref, '-')"  # Don't publish pre-releases
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      
      - name: Publish crates
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          # Publish in dependency order if you have multiple crates
          # cargo publish -p aetheric-core --token $CARGO_REGISTRY_TOKEN
          # cargo publish -p aetheric-edge --token $CARGO_REGISTRY_TOKEN