name: Build and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            archive: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive: tar.gz
          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            archive: tar.gz
          
          # macOS targets
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz
          
          # Windows targets
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            archive: zip

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross-compilation dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib
        if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        elif [[ "${{ matrix.target }}" == "armv7-unknown-linux-gnueabihf" ]]; then
          sudo apt-get install -y gcc-arm-linux-gnueabihf
        elif [[ "${{ matrix.target }}" == "x86_64-unknown-linux-musl" ]]; then
          sudo apt-get install -y musl-tools
        fi

    - name: Install cargo-cross
      if: matrix.os == 'ubuntu-latest' && matrix.target != 'x86_64-unknown-linux-gnu'
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Build binaries
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.target }}" != "x86_64-unknown-linux-gnu" ]]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi

    - name: Create archive name
      id: archive
      shell: bash
      run: |
        version=${GITHUB_REF#refs/tags/}
        if [[ "$version" == "refs/"* ]]; then
          version="dev"
        fi
        name="aetheric-edge-$version-${{ matrix.target }}"
        echo "name=$name" >> $GITHUB_OUTPUT
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Create release archive
      shell: bash
      run: |
        set -euxo pipefail
        
        mkdir -p release/${{ steps.archive.outputs.name }}
        
        # Copy binaries
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp target/${{ matrix.target }}/release/aetheric-agent.exe release/${{ steps.archive.outputs.name }}/
          cp target/${{ matrix.target }}/release/aetheric.exe release/${{ steps.archive.outputs.name }}/
        else
          cp target/${{ matrix.target }}/release/aetheric-agent release/${{ steps.archive.outputs.name }}/
          cp target/${{ matrix.target }}/release/aetheric release/${{ steps.archive.outputs.name }}/
        fi
        
        # Copy additional files
        cp LICENSE release/${{ steps.archive.outputs.name }}/
        cp README.md release/${{ steps.archive.outputs.name }}/
        cp -r examples release/${{ steps.archive.outputs.name }}/
        
        # Create installation script for this platform
        mkdir -p release/${{ steps.archive.outputs.name }}/install
        
        # Create archive
        cd release
        if [[ "${{ matrix.archive }}" == "zip" ]]; then
          7z a ${{ steps.archive.outputs.name }}.zip ${{ steps.archive.outputs.name }}
        else
          tar -czf ${{ steps.archive.outputs.name }}.tar.gz ${{ steps.archive.outputs.name }}
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.archive.outputs.name }}
        path: release/${{ steps.archive.outputs.name }}.${{ matrix.archive }}

  create-installers:
    name: Create Installation Scripts
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create installation scripts
      run: |
        mkdir -p installers
        
        # Create Linux/macOS install script
        cat > installers/install.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Aetheric Edge Installation Script
        # Supports Linux (x64, arm64, armv7) and macOS (x64, arm64)
        
        REPO="Aetheric-Technology/Aetheric-Edge"
        INSTALL_DIR="/usr/local/bin"
        CONFIG_DIR="/etc/aetheric-edge"
        SERVICE_DIR="/etc/systemd/system"
        
        # Colors for output
        RED='\033[0;31m'
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        NC='\033[0m' # No Color
        
        info() {
            echo -e "${GREEN}[INFO]${NC} $1"
        }
        
        warn() {
            echo -e "${YELLOW}[WARN]${NC} $1"
        }
        
        error() {
            echo -e "${RED}[ERROR]${NC} $1"
            exit 1
        }
        
        # Detect OS and architecture
        detect_platform() {
            local os=$(uname -s | tr '[:upper:]' '[:lower:]')
            local arch=$(uname -m)
            
            case $os in
                linux*)
                    OS="linux"
                    ;;
                darwin*)
                    OS="darwin"
                    INSTALL_DIR="/usr/local/bin"
                    CONFIG_DIR="/usr/local/etc/aetheric-edge"
                    ;;
                *)
                    error "Unsupported operating system: $os"
                    ;;
            esac
            
            case $arch in
                x86_64|amd64)
                    ARCH="x86_64"
                    ;;
                aarch64|arm64)
                    ARCH="aarch64"
                    ;;
                armv7l)
                    ARCH="armv7"
                    TARGET_SUFFIX="armv7-unknown-linux-gnueabihf"
                    ;;
                *)
                    error "Unsupported architecture: $arch"
                    ;;
            esac
            
            # Set target triple
            if [[ "$TARGET_SUFFIX" == "" ]]; then
                case "$OS-$ARCH" in
                    linux-x86_64)
                        TARGET="x86_64-unknown-linux-gnu"
                        ;;
                    linux-aarch64)
                        TARGET="aarch64-unknown-linux-gnu"
                        ;;
                    darwin-x86_64)
                        TARGET="x86_64-apple-darwin"
                        ;;
                    darwin-aarch64)
                        TARGET="aarch64-apple-darwin"
                        ;;
                    *)
                        error "Unsupported platform: $OS-$ARCH"
                        ;;
                esac
            else
                TARGET="$TARGET_SUFFIX"
            fi
            
            info "Detected platform: $OS-$ARCH ($TARGET)"
        }
        
        # Check if running as root
        check_root() {
            if [[ $EUID -ne 0 ]]; then
                error "This script must be run as root (use sudo)"
            fi
        }
        
        # Install mosquitto
        install_mosquitto() {
            info "Installing Mosquitto MQTT broker..."
            
            case "$OS" in
                linux)
                    if command -v apt-get >/dev/null 2>&1; then
                        apt-get update
                        apt-get install -y mosquitto mosquitto-clients
                        systemctl enable mosquitto
                        systemctl start mosquitto
                    elif command -v yum >/dev/null 2>&1; then
                        yum install -y epel-release
                        yum install -y mosquitto mosquitto-clients
                        systemctl enable mosquitto
                        systemctl start mosquitto
                    elif command -v pacman >/dev/null 2>&1; then
                        pacman -S --noconfirm mosquitto
                        systemctl enable mosquitto
                        systemctl start mosquitto
                    else
                        warn "Could not install Mosquitto automatically. Please install it manually."
                    fi
                    ;;
                darwin)
                    if command -v brew >/dev/null 2>&1; then
                        brew install mosquitto
                        brew services start mosquitto
                    else
                        warn "Homebrew not found. Please install Mosquitto manually."
                    fi
                    ;;
            esac
        }
        
        # Download and install Aetheric Edge
        install_aetheric_edge() {
            info "Downloading Aetheric Edge..."
            
            # Get latest release URL
            local latest_url="https://api.github.com/repos/$REPO/releases/latest"
            local download_url=$(curl -s "$latest_url" | grep -o "\"browser_download_url\":[[:space:]]*\"[^\"]*$TARGET[^\"]*\.tar\.gz\"" | cut -d'"' -f4)
            
            if [[ -z "$download_url" ]]; then
                error "Could not find release for platform $TARGET"
            fi
            
            info "Downloading from: $download_url"
            
            # Download and extract
            local temp_dir=$(mktemp -d)
            cd "$temp_dir"
            
            curl -L -o aetheric-edge.tar.gz "$download_url"
            tar -xzf aetheric-edge.tar.gz
            
            # Find extracted directory
            local extracted_dir=$(find . -name "aetheric-edge-*" -type d | head -n1)
            if [[ -z "$extracted_dir" ]]; then
                error "Could not find extracted files"
            fi
            
            # Install binaries
            info "Installing binaries to $INSTALL_DIR..."
            cp "$extracted_dir/aetheric-agent" "$INSTALL_DIR/"
            cp "$extracted_dir/aetheric" "$INSTALL_DIR/"
            chmod +x "$INSTALL_DIR/aetheric-agent" "$INSTALL_DIR/aetheric"
            
            # Create config directory
            mkdir -p "$CONFIG_DIR"
            
            # Generate default config if examples exist
            if [[ -f "$extracted_dir/examples/aetheric.toml" ]]; then
                cp "$extracted_dir/examples/aetheric.toml" "$CONFIG_DIR/"
                info "Default configuration copied to $CONFIG_DIR/aetheric.toml"
            fi
            
            # Install systemd service (Linux only)
            if [[ "$OS" == "linux" && -d "$SERVICE_DIR" ]]; then
                create_systemd_service
            fi
            
            # Cleanup
            cd /
            rm -rf "$temp_dir"
            
            info "Aetheric Edge installed successfully!"
        }
        
        # Create systemd service
        create_systemd_service() {
            info "Creating systemd service..."
            
            cat > "$SERVICE_DIR/aetheric-agent.service" << EOSERVICE
        [Unit]
        Description=Aetheric Edge Agent
        Documentation=https://github.com/Aetheric-Technology/Aetheric-Edge
        After=network.target mosquitto.service
        Wants=mosquitto.service
        
        [Service]
        Type=simple
        User=aetheric
        Group=aetheric
        ExecStart=$INSTALL_DIR/aetheric-agent --config $CONFIG_DIR/aetheric.toml
        Restart=always
        RestartSec=5
        StandardOutput=journal
        StandardError=journal
        SyslogIdentifier=aetheric-agent
        
        [Install]
        WantedBy=multi-user.target
        EOSERVICE
        
            # Create aetheric user
            if ! id "aetheric" >/dev/null 2>&1; then
                useradd -r -s /bin/false -d /var/lib/aetheric aetheric
            fi
            
            # Set permissions
            chown -R aetheric:aetheric "$CONFIG_DIR"
            
            systemctl daemon-reload
            systemctl enable aetheric-agent
            
            info "Systemd service created. Start with: systemctl start aetheric-agent"
        }
        
        # Main installation flow
        main() {
            info "Starting Aetheric Edge installation..."
            
            detect_platform
            check_root
            install_mosquitto
            install_aetheric_edge
            
            info "Installation complete!"
            info "Next steps:"
            info "1. Edit configuration: $CONFIG_DIR/aetheric.toml"
            info "2. Create device certificate: $INSTALL_DIR/aetheric cert create <device-id>"
            if [[ "$OS" == "linux" ]]; then
                info "3. Start the agent: systemctl start aetheric-agent"
                info "4. View logs: journalctl -u aetheric-agent -f"
            else
                info "3. Start the agent: $INSTALL_DIR/aetheric-agent"
            fi
        }
        
        main "$@"
        EOF
        
        chmod +x installers/install.sh
        
        # Create Windows install script
        cat > installers/install.ps1 << 'EOF'
        # Aetheric Edge Windows Installation Script
        
        param(
            [string]$InstallDir = "$env:ProgramFiles\AethericEdge",
            [string]$ConfigDir = "$env:ProgramData\AethericEdge",
            [switch]$Force
        )
        
        $ErrorActionPreference = "Stop"
        
        $REPO = "Aetheric-Technology/Aetheric-Edge"
        $TARGET = "x86_64-pc-windows-msvc"
        
        function Write-Info {
            param($Message)
            Write-Host "[INFO] $Message" -ForegroundColor Green
        }
        
        function Write-Warn {
            param($Message)
            Write-Host "[WARN] $Message" -ForegroundColor Yellow
        }
        
        function Write-Error {
            param($Message)
            Write-Host "[ERROR] $Message" -ForegroundColor Red
            exit 1
        }
        
        function Test-Admin {
            $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
            $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
            return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
        }
        
        function Install-Mosquitto {
            Write-Info "Installing Mosquitto MQTT broker..."
            
            if (Get-Command "winget" -ErrorAction SilentlyContinue) {
                try {
                    winget install --id=EclipseFoundation.Mosquitto --silent --accept-source-agreements
                    Write-Info "Mosquitto installed via winget"
                    return
                } catch {
                    Write-Warn "Failed to install Mosquitto via winget: $($_.Exception.Message)"
                }
            }
            
            if (Get-Command "choco" -ErrorAction SilentlyContinue) {
                try {
                    choco install mosquitto -y
                    Write-Info "Mosquitto installed via Chocolatey"
                    return
                } catch {
                    Write-Warn "Failed to install Mosquitto via Chocolatey: $($_.Exception.Message)"
                }
            }
            
            Write-Warn "Could not install Mosquitto automatically."
            Write-Info "Please download and install Mosquitto manually from: https://mosquitto.org/download/"
        }
        
        function Install-AethericEdge {
            Write-Info "Downloading Aetheric Edge..."
            
            # Get latest release
            $latestUrl = "https://api.github.com/repos/$REPO/releases/latest"
            $release = Invoke-RestMethod -Uri $latestUrl
            
            $asset = $release.assets | Where-Object { $_.name -like "*$TARGET*.zip" }
            if (-not $asset) {
                Write-Error "Could not find release for platform $TARGET"
            }
            
            $downloadUrl = $asset.browser_download_url
            Write-Info "Downloading from: $downloadUrl"
            
            # Download and extract
            $tempDir = New-TemporaryFile | ForEach-Object { Remove-Item $_; New-Item -ItemType Directory -Path $_ }
            $zipPath = Join-Path $tempDir "aetheric-edge.zip"
            
            Invoke-WebRequest -Uri $downloadUrl -OutFile $zipPath
            Expand-Archive -Path $zipPath -DestinationPath $tempDir
            
            # Find extracted directory
            $extractedDir = Get-ChildItem -Path $tempDir -Directory | Where-Object { $_.Name -like "aetheric-edge-*" } | Select-Object -First 1
            if (-not $extractedDir) {
                Write-Error "Could not find extracted files"
            }
            
            # Create install directory
            if (-not (Test-Path $InstallDir)) {
                New-Item -ItemType Directory -Path $InstallDir -Force | Out-Null
            }
            
            # Install binaries
            Write-Info "Installing binaries to $InstallDir..."
            Copy-Item -Path "$($extractedDir.FullName)\aetheric-agent.exe" -Destination $InstallDir -Force
            Copy-Item -Path "$($extractedDir.FullName)\aetheric.exe" -Destination $InstallDir -Force
            
            # Create config directory
            if (-not (Test-Path $ConfigDir)) {
                New-Item -ItemType Directory -Path $ConfigDir -Force | Out-Null
            }
            
            # Copy default config if available
            $exampleConfig = Join-Path $extractedDir.FullName "examples\aetheric.toml"
            if (Test-Path $exampleConfig) {
                Copy-Item -Path $exampleConfig -Destination "$ConfigDir\aetheric.toml" -Force
                Write-Info "Default configuration copied to $ConfigDir\aetheric.toml"
            fi
            
            # Add to PATH
            $currentPath = [Environment]::GetEnvironmentVariable("PATH", "Machine")
            if ($currentPath -notlike "*$InstallDir*") {
                [Environment]::SetEnvironmentVariable("PATH", "$currentPath;$InstallDir", "Machine")
                Write-Info "Added $InstallDir to system PATH"
            fi
            
            # Create Windows service
            Create-Service
            
            # Cleanup
            Remove-Item -Path $tempDir -Recurse -Force
            
            Write-Info "Aetheric Edge installed successfully!"
        }
        
        function Create-Service {
            Write-Info "Creating Windows service..."
            
            $serviceName = "AethericAgent"
            $binaryPath = Join-Path $InstallDir "aetheric-agent.exe"
            $configPath = Join-Path $ConfigDir "aetheric.toml"
            
            # Remove existing service if it exists
            $existingService = Get-Service -Name $serviceName -ErrorAction SilentlyContinue
            if ($existingService) {
                if ($existingService.Status -eq "Running") {
                    Stop-Service -Name $serviceName -Force
                }
                & sc.exe delete $serviceName
            }
            
            # Create new service
            & sc.exe create $serviceName binPath= "`"$binaryPath`" --config `"$configPath`"" start= auto
            & sc.exe description $serviceName "Aetheric Edge Agent - IoT device management service"
            
            Write-Info "Windows service '$serviceName' created."
            Write-Info "Start with: Start-Service $serviceName"
        }
        
        # Main execution
        Write-Info "Starting Aetheric Edge installation..."
        
        if (-not (Test-Admin)) {
            Write-Error "This script must be run as Administrator. Please run PowerShell as Administrator and try again."
        }
        
        Install-Mosquitto
        Install-AethericEdge
        
        Write-Info "Installation complete!"
        Write-Info "Next steps:"
        Write-Info "1. Edit configuration: $ConfigDir\aetheric.toml"
        Write-Info "2. Create device certificate: aetheric cert create <device-id>"
        Write-Info "3. Start the service: Start-Service AethericAgent"
        Write-Info "4. View service status: Get-Service AethericAgent"
        EOF
        
        # Create universal installer
        cat > installers/install-universal.sh << 'EOF'
        #!/bin/bash
        # Universal Aetheric Edge Installer
        # Detects platform and downloads appropriate installer
        
        set -e
        
        REPO="Aetheric-Technology/Aetheric-Edge"
        
        # Colors
        GREEN='\033[0;32m'
        RED='\033[0;31m'
        NC='\033[0m'
        
        info() { echo -e "${GREEN}[INFO]${NC} $1"; }
        error() { echo -e "${RED}[ERROR]${NC} $1"; exit 1; }
        
        # Detect platform
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        case $OS in
            linux*|darwin*)
                info "Detected Unix-like system: $OS"
                curl -fsSL https://raw.githubusercontent.com/$REPO/main/installers/install.sh | bash
                ;;
            mingw*|cygwin*|msys*)
                info "Detected Windows (MSYS/Cygwin)"
                error "Please use PowerShell to run: irm https://raw.githubusercontent.com/$REPO/main/installers/install.ps1 | iex"
                ;;
            *)
                error "Unsupported operating system: $OS"
                ;;
        esac
        EOF
        
        chmod +x installers/install-universal.sh

    - name: Upload installation scripts
      uses: actions/upload-artifact@v3
      with:
        name: installers
        path: installers/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, create-installers]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Copy binary archives
        find artifacts -name "*.tar.gz" -o -name "*.zip" | while read file; do
          cp "$file" release-assets/
        done
        
        # Copy installation scripts
        cp artifacts/installers/* release-assets/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: release-assets/*
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## Installation
          
          ### Quick Install (Linux/macOS)
          ```bash
          curl -fsSL https://raw.githubusercontent.com/Aetheric-Technology/Aetheric-Edge/main/installers/install.sh | sudo bash
          ```
          
          ### Windows (PowerShell as Administrator)
          ```powershell
          irm https://raw.githubusercontent.com/Aetheric-Technology/Aetheric-Edge/main/installers/install.ps1 | iex
          ```
          
          ### Manual Installation
          Download the appropriate binary for your platform below, extract it, and follow the README for setup instructions.
          
          ## What's New
          See the changes below for this release.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}