name: Build and Release

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  # Quality checks (disabled for now, can be enabled later)
  # checks:
  #   name: Quality Checks
  #   runs-on: ubuntu-latest
  #   if: false  # Disabled - change to 'true' to enable
  #   steps:
  #     - uses: actions/checkout@v4
  #     
  #     - uses: dtolnay/rust-toolchain@stable
  #       with:
  #         components: rustfmt, clippy
  #     
  #     - uses: Swatinem/rust-cache@v2
  #     
  #     - name: Check formatting
  #       run: cargo fmt --all -- --check
  #     
  #     - name: Check compilation
  #       run: cargo check --all-targets --all-features
  #     
  #     - name: Run clippy
  #       run: cargo clippy --all-targets --all-features -- -W clippy::all -A dead_code -A unused_variables -A unused_imports -A clippy::needless_borrows_for_generic_args -A clippy::redundant_pattern_matching -A clippy::too_many_arguments -A clippy::unnecessary_cast -A clippy::derivable_impls -A clippy::redundant_closure -A clippy::manual_strip -A clippy::needless_borrow -A clippy::useless_vec -A clippy::field_reassign_with_default -A clippy::println_empty_string -A clippy::manual_flatten -A clippy::single_component_path_imports -A clippy::empty_line_after_doc_comments -A clippy::manual_range_contains -A clippy::bool_assert_comparison -A clippy::new_without_default -A clippy::absurd_extreme_comparisons -A clippy::assertions_on_constants -A unused_comparisons -A clippy::len_zero
  #     
  #     - name: Run tests
  #       env:
  #         RUSTFLAGS: "-A dead_code -A unused_variables -A unused_imports -A clippy::needless_borrows_for_generic_args -A clippy::redundant_pattern_matching -A clippy::too_many_arguments -A clippy::unnecessary_cast -A clippy::derivable_impls -A clippy::redundant_closure -A clippy::manual_strip -A clippy::needless_borrow -A clippy::useless_vec -A clippy::field_reassign_with_default -A clippy::println_empty_string -A clippy::manual_flatten -A clippy::single_component_path_imports -A clippy::empty_line_after_doc_comments -A clippy::manual_range_contains -A clippy::bool_assert_comparison -A clippy::new_without_default -A clippy::absurd_extreme_comparisons -A clippy::assertions_on_constants -A unused_comparisons"
  #       run: cargo test --all-features

  # Multi-platform builds
  build:
    name: Build - ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    # needs: checks  # Disabled since checks are disabled
    strategy:
      fail-fast: false
      matrix:
        platform:
          # Linux targets
          - name: Linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use_cross: false
          
          - name: Linux-x86_64-musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use_cross: true
          
          - name: Linux-aarch64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use_cross: true
          
          - name: Linux-arm
            os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            use_cross: true
          
          - name: Linux-i686
            os: ubuntu-latest
            target: i686-unknown-linux-gnu
            use_cross: true
          
          # Windows targets (disabled for now - will enable later)
          # - name: Windows-x86_64
          #   os: windows-latest
          #   target: x86_64-pc-windows-msvc
          #   use_cross: false
          # 
          # - name: Windows-aarch64
          #   os: windows-latest
          #   target: aarch64-pc-windows-msvc
          #   use_cross: false
          
          # macOS targets (disabled for now - will enable later)
          # - name: macOS-x86_64
          #   os: macos-latest
          #   target: x86_64-apple-darwin
          #   use_cross: false
          # 
          # - name: macOS-aarch64
          #   os: macos-latest
          #   target: aarch64-apple-darwin
          #   use_cross: false

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}
      
      - name: Setup Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform.target }}
      
      # Cross-compilation using houseabsolute/actions-rust-cross
      - name: Build with cross
        if: matrix.platform.use_cross
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: ${{ matrix.platform.target }}
          args: "--locked --release"
          strip: true
      
      # Native compilation
      - name: Build native
        if: ${{ !matrix.platform.use_cross }}
        env:
          RUSTFLAGS: "-A dead_code -A unused_variables -A unused_imports -A clippy::needless_borrows_for_generic_args -A clippy::redundant_pattern_matching -A clippy::too_many_arguments -A clippy::unnecessary_cast -A clippy::derivable_impls -A clippy::redundant_closure -A clippy::manual_strip -A clippy::needless_borrow -A clippy::useless_vec -A clippy::field_reassign_with_default -A clippy::println_empty_string -A clippy::manual_flatten -A clippy::single_component_path_imports -A clippy::empty_line_after_doc_comments -A clippy::manual_range_contains -A clippy::bool_assert_comparison -A clippy::new_without_default -A clippy::absurd_extreme_comparisons -A clippy::assertions_on_constants -A unused_comparisons"
        run: cargo build --locked --release --target ${{ matrix.platform.target }}
      
      # Strip binaries for native builds (Unix only)
      - name: Strip binaries
        if: ${{ !matrix.platform.use_cross && matrix.platform.os != 'windows-latest' }}
        run: |
          strip target/${{ matrix.platform.target }}/release/aetheric-agent
          strip target/${{ matrix.platform.target }}/release/aetheric
      
      # Package binaries for releases
      - name: Package binaries
        if: startsWith(github.ref, 'refs/tags/v')
        id: package
        shell: bash
        run: |
          # Get version from tag
          version=${GITHUB_REF#refs/tags/}
          
          # Setup variables
          binary_name="aetheric"
          agent_name="aetheric-agent"
          dirname="${binary_name}-${version}-${{ matrix.platform.target }}"
          
          # Create package directory
          mkdir -p "$dirname"
          
          # Copy binaries
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            cp "target/${{ matrix.platform.target }}/release/${binary_name}.exe" "$dirname/"
            cp "target/${{ matrix.platform.target }}/release/${agent_name}.exe" "$dirname/"
          else
            cp "target/${{ matrix.platform.target }}/release/${binary_name}" "$dirname/"
            cp "target/${{ matrix.platform.target }}/release/${agent_name}" "$dirname/"
          fi
          
          # Copy additional files
          cp README.md LICENSE "$dirname/"
          cp -r examples "$dirname/" || true
          
          # Create archive
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            7z a "${dirname}.zip" "$dirname"
            echo "asset=${dirname}.zip" >> $GITHUB_OUTPUT
          else
            tar -czf "${dirname}.tar.gz" "$dirname"
            echo "asset=${dirname}.tar.gz" >> $GITHUB_OUTPUT
          fi
      
      # Upload artifacts for releases
      - name: Upload release artifacts
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }}
          path: ${{ steps.package.outputs.asset }}
          retention-days: 1

  # Create GitHub release
  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create installation scripts
        run: |
          mkdir -p installers
          
          # Create Linux/macOS installer
          cat > installers/install.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Aetheric Edge Installation Script
          REPO="Aetheric-Technology/Aetheric-Edge"
          VERSION="${1:-latest}"
          
          # Colors
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          NC='\033[0m'
          
          info() { echo -e "${GREEN}[INFO]${NC} $1"; }
          warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
          error() { echo -e "${RED}[ERROR]${NC} $1"; exit 1; }
          
          # Check if running as root
          if [[ $EUID -ne 0 ]]; then
             error "This script must be run as root (use sudo)"
          fi
          
          # Detect platform
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m)
          
          case "$OS-$ARCH" in
            linux-x86_64)
              TARGET="x86_64-unknown-linux-gnu"
              ;;
            linux-aarch64|linux-arm64)
              TARGET="aarch64-unknown-linux-gnu"
              ;;
            linux-armv7l)
              TARGET="armv7-unknown-linux-gnueabihf"
              ;;
            darwin-x86_64)
              TARGET="x86_64-apple-darwin"
              ;;
            darwin-arm64|darwin-aarch64)
              TARGET="aarch64-apple-darwin"
              ;;
            *)
              error "Unsupported platform: $OS-$ARCH"
              ;;
          esac
          
          info "Detected platform: $OS-$ARCH ($TARGET)"
          
          # Get download URL
          if [[ "$VERSION" == "latest" ]]; then
            DOWNLOAD_URL=$(curl -s "https://api.github.com/repos/$REPO/releases/latest" \
              | grep -o "\"browser_download_url\":[[:space:]]*\"[^\"]*${TARGET}[^\"]*\.tar\.gz\"" \
              | cut -d'"' -f4)
          else
            DOWNLOAD_URL="https://github.com/$REPO/releases/download/$VERSION/aetheric-$VERSION-$TARGET.tar.gz"
          fi
          
          if [[ -z "$DOWNLOAD_URL" ]]; then
            error "Could not find release for platform $TARGET"
          fi
          
          info "Downloading from: $DOWNLOAD_URL"
          
          # Download and install
          TEMP_DIR=$(mktemp -d)
          cd "$TEMP_DIR"
          
          curl -L -o aetheric.tar.gz "$DOWNLOAD_URL"
          tar -xzf aetheric.tar.gz
          
          # Find extracted directory
          EXTRACTED_DIR=$(find . -name "aetheric-*" -type d | head -n1)
          
          # Install binaries
          install -m 755 "$EXTRACTED_DIR/aetheric" /usr/local/bin/
          install -m 755 "$EXTRACTED_DIR/aetheric-agent" /usr/local/bin/
          
          # Create config directory
          mkdir -p /etc/aetheric-edge
          
          # Copy example config if it exists
          if [[ -f "$EXTRACTED_DIR/examples/aetheric.toml" ]]; then
            cp "$EXTRACTED_DIR/examples/aetheric.toml" /etc/aetheric-edge/
          fi
          
          # Cleanup
          cd /
          rm -rf "$TEMP_DIR"
          
          info "Aetheric Edge installed successfully!"
          info "Binaries installed to: /usr/local/bin/"
          info "Config directory: /etc/aetheric-edge/"
          EOF
          
          chmod +x installers/install.sh
          
          # Create Windows installer
          cat > installers/install.ps1 << 'EOF'
          # Aetheric Edge Windows Installation Script
          param(
              [string]$Version = "latest",
              [string]$InstallDir = "$env:ProgramFiles\AethericEdge"
          )
          
          $ErrorActionPreference = "Stop"
          $REPO = "Aetheric-Technology/Aetheric-Edge"
          
          function Write-Info { Write-Host "[INFO] $args" -ForegroundColor Green }
          function Write-Error { Write-Host "[ERROR] $args" -ForegroundColor Red; exit 1 }
          
          # Check admin
          $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
          $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
          if (-not $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
              Write-Error "This script must be run as Administrator"
          }
          
          # Detect architecture
          $arch = if ([Environment]::Is64BitOperatingSystem) { "x86_64" } else { Write-Error "32-bit Windows not supported" }
          $target = "x86_64-pc-windows-msvc"
          
          Write-Info "Installing Aetheric Edge for Windows ($target)"
          
          # Get download URL
          if ($Version -eq "latest") {
              $release = Invoke-RestMethod -Uri "https://api.github.com/repos/$REPO/releases/latest"
              $asset = $release.assets | Where-Object { $_.name -like "*$target*.zip" }
              $downloadUrl = $asset.browser_download_url
          } else {
              $downloadUrl = "https://github.com/$REPO/releases/download/$Version/aetheric-$Version-$target.zip"
          }
          
          Write-Info "Downloading from: $downloadUrl"
          
          # Download and extract
          $tempDir = New-TemporaryFile | ForEach-Object { Remove-Item $_; New-Item -ItemType Directory -Path $_ }
          $zipPath = Join-Path $tempDir "aetheric.zip"
          
          Invoke-WebRequest -Uri $downloadUrl -OutFile $zipPath
          Expand-Archive -Path $zipPath -DestinationPath $tempDir
          
          # Find extracted directory
          $extractedDir = Get-ChildItem -Path $tempDir -Directory | Where-Object { $_.Name -like "aetheric-*" } | Select-Object -First 1
          
          # Create install directory
          New-Item -ItemType Directory -Path $InstallDir -Force | Out-Null
          
          # Copy files
          Copy-Item -Path "$($extractedDir.FullName)\*.exe" -Destination $InstallDir -Force
          
          # Add to PATH
          $currentPath = [Environment]::GetEnvironmentVariable("PATH", "Machine")
          if ($currentPath -notlike "*$InstallDir*") {
              [Environment]::SetEnvironmentVariable("PATH", "$currentPath;$InstallDir", "Machine")
              Write-Info "Added $InstallDir to PATH"
          }
          
          # Cleanup
          Remove-Item -Path $tempDir -Recurse -Force
          
          Write-Info "Aetheric Edge installed successfully to $InstallDir"
          Write-Info "Restart your terminal to use 'aetheric' and 'aetheric-agent' commands"
          EOF
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*
            installers/*
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: true
          body: |
            ## Installation
            
            ### Quick Install
            
            **Linux:**
            ```bash
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/install.sh | sudo bash -s ${{ steps.version.outputs.version }}
            ```
            
            ### Manual Installation
            
            Download the appropriate binary archive for your platform from the assets below.
            
            ### Supported Platforms
            
            - **Linux**: x86_64, aarch64 (ARM64), armv7, i686, musl
            
            *Note: Windows and macOS builds are temporarily disabled and will be enabled in a future release.*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Success gate
  success:
    name: All Builds Successful
    if: success()
    needs: [build]  # Only depends on build since checks are disabled
    runs-on: ubuntu-latest
    steps:
      - name: Mark success
        run: echo "All builds completed successfully!"