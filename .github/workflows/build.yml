name: Build and Release

on:
  push:
    tags: ['v*']  # Only run on version tags
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short
  RUSTUP_MAX_RETRIES: 10

jobs:
  # Quality checks (disabled for now, can be enabled later)
  # checks:
  #   name: Quality Checks
  #   runs-on: ubuntu-latest
  #   if: false  # Disabled - change to 'true' to enable
  #   steps:
  #     - uses: actions/checkout@v4
  #     
  #     - uses: dtolnay/rust-toolchain@stable
  #       with:
  #         components: rustfmt, clippy
  #     
  #     - uses: Swatinem/rust-cache@v2
  #     
  #     - name: Check formatting
  #       run: cargo fmt --all -- --check
  #     
  #     - name: Check compilation
  #       run: cargo check --all-targets --all-features
  #     
  #     - name: Run clippy
  #       run: cargo clippy --all-targets --all-features -- -W clippy::all -A dead_code -A unused_variables -A unused_imports -A clippy::needless_borrows_for_generic_args -A clippy::redundant_pattern_matching -A clippy::too_many_arguments -A clippy::unnecessary_cast -A clippy::derivable_impls -A clippy::redundant_closure -A clippy::manual_strip -A clippy::needless_borrow -A clippy::useless_vec -A clippy::field_reassign_with_default -A clippy::println_empty_string -A clippy::manual_flatten -A clippy::single_component_path_imports -A clippy::empty_line_after_doc_comments -A clippy::manual_range_contains -A clippy::bool_assert_comparison -A clippy::new_without_default -A clippy::absurd_extreme_comparisons -A clippy::assertions_on_constants -A unused_comparisons -A clippy::len_zero
  #     
  #     - name: Run tests
  #       env:
  #         RUSTFLAGS: "-A dead_code -A unused_variables -A unused_imports -A clippy::needless_borrows_for_generic_args -A clippy::redundant_pattern_matching -A clippy::too_many_arguments -A clippy::unnecessary_cast -A clippy::derivable_impls -A clippy::redundant_closure -A clippy::manual_strip -A clippy::needless_borrow -A clippy::useless_vec -A clippy::field_reassign_with_default -A clippy::println_empty_string -A clippy::manual_flatten -A clippy::single_component_path_imports -A clippy::empty_line_after_doc_comments -A clippy::manual_range_contains -A clippy::bool_assert_comparison -A clippy::new_without_default -A clippy::absurd_extreme_comparisons -A clippy::assertions_on_constants -A unused_comparisons"
  #       run: cargo test --all-features

  # Multi-platform builds
  build:
    name: Build - ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    # needs: checks  # Disabled since checks are disabled
    strategy:
      fail-fast: false
      matrix:
        platform:
          # Linux targets
          - name: Linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use_cross: false
          
          - name: Linux-x86_64-musl
            os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use_cross: true
          
          - name: Linux-aarch64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use_cross: true
          
          - name: Linux-arm
            os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            use_cross: true
          
          - name: Linux-i686
            os: ubuntu-latest
            target: i686-unknown-linux-gnu
            use_cross: true
          
          # Windows targets
          - name: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            use_cross: false
          
          - name: Windows-aarch64
            os: windows-latest
            target: aarch64-pc-windows-msvc
            use_cross: false
          
          # macOS targets
          - name: macOS-x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            use_cross: false
          
          - name: macOS-aarch64
            os: macos-latest
            target: aarch64-apple-darwin
            use_cross: false

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}
      
      - name: Setup Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.platform.target }}
      
      # Cross-compilation using houseabsolute/actions-rust-cross
      - name: Build with cross
        if: matrix.platform.use_cross
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: build
          target: ${{ matrix.platform.target }}
          args: "--locked --release"
          strip: true
      
      # Native compilation
      - name: Build native
        if: ${{ !matrix.platform.use_cross }}
        env:
          RUSTFLAGS: "-A dead_code -A unused_variables -A unused_imports -A clippy::needless_borrows_for_generic_args -A clippy::redundant_pattern_matching -A clippy::too_many_arguments -A clippy::unnecessary_cast -A clippy::derivable_impls -A clippy::redundant_closure -A clippy::manual_strip -A clippy::needless_borrow -A clippy::useless_vec -A clippy::field_reassign_with_default -A clippy::println_empty_string -A clippy::manual_flatten -A clippy::single_component_path_imports -A clippy::empty_line_after_doc_comments -A clippy::manual_range_contains -A clippy::bool_assert_comparison -A clippy::new_without_default -A clippy::absurd_extreme_comparisons -A clippy::assertions_on_constants -A unused_comparisons"
        run: cargo build --locked --release --target ${{ matrix.platform.target }}
      
      # Strip binaries for native builds (Unix only)
      - name: Strip binaries
        if: ${{ !matrix.platform.use_cross && matrix.platform.os != 'windows-latest' }}
        run: |
          strip target/${{ matrix.platform.target }}/release/aetheric-agent
          strip target/${{ matrix.platform.target }}/release/aetheric
      
      # Package binaries for releases
      - name: Package binaries
        if: startsWith(github.ref, 'refs/tags/v')
        id: package
        shell: bash
        run: |
          # Get version from tag
          version=${GITHUB_REF#refs/tags/}
          
          # Setup variables
          binary_name="aetheric"
          agent_name="aetheric-agent"
          dirname="${binary_name}-${version}-${{ matrix.platform.target }}"
          
          # Create package directory
          mkdir -p "$dirname"
          
          # Copy binaries
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            cp "target/${{ matrix.platform.target }}/release/${binary_name}.exe" "$dirname/"
            cp "target/${{ matrix.platform.target }}/release/${agent_name}.exe" "$dirname/"
          else
            cp "target/${{ matrix.platform.target }}/release/${binary_name}" "$dirname/"
            cp "target/${{ matrix.platform.target }}/release/${agent_name}" "$dirname/"
          fi
          
          # Copy additional files
          cp README.md "$dirname/"
          cp LICENSE "$dirname/" || echo "LICENSE file not found, skipping"
          cp -r systemd "$dirname/" || echo "systemd directory not found, skipping"
          cp -r examples "$dirname/" || echo "examples directory not found, skipping"
          
          # Create archive
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            7z a "${dirname}.zip" "$dirname"
            echo "asset=${dirname}.zip" >> $GITHUB_OUTPUT
          else
            tar -czf "${dirname}.tar.gz" "$dirname"
            echo "asset=${dirname}.tar.gz" >> $GITHUB_OUTPUT
          fi
      
      # Upload artifacts for releases
      - name: Upload release artifacts
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.name }}
          path: ${{ steps.package.outputs.asset }}
          retention-days: 1

  # Create GitHub release
  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create installation scripts
        run: |
          mkdir -p installers
          
          # Create Linux/macOS installer
          cat > installers/install.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Aetheric Edge Complete Installation Script
          REPO="Aetheric-Technology/Aetheric-Edge"
          VERSION="${1:-latest}"
          SETUP_MODE="${2:-prompt}"  # prompt, auto, or skip
          
          # Colors
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          BLUE='\033[0;34m'
          NC='\033[0m'
          
          info() { echo -e "${GREEN}[INFO]${NC} $1"; }
          warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
          error() { echo -e "${RED}[ERROR]${NC} $1"; exit 1; }
          success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
          step() { echo -e "${BLUE}[STEP]${NC} $1"; }
          
          # Check if running as root
          if [[ $EUID -ne 0 ]]; then
             error "This script must be run as root (use sudo)"
          fi
          
          # Detect platform and package manager
          detect_platform() {
              OS=$(uname -s | tr '[:upper:]' '[:lower:]')
              ARCH=$(uname -m)
              
              # Detect package manager
              if command -v apt-get >/dev/null 2>&1; then
                  PACKAGE_MANAGER="apt"
                  INSTALL_CMD="apt-get update && apt-get install -y"
              elif command -v dnf >/dev/null 2>&1; then
                  PACKAGE_MANAGER="dnf"
                  INSTALL_CMD="dnf install -y"
              elif command -v yum >/dev/null 2>&1; then
                  PACKAGE_MANAGER="yum"
                  INSTALL_CMD="yum install -y"
              elif command -v pacman >/dev/null 2>&1; then
                  PACKAGE_MANAGER="pacman"
                  INSTALL_CMD="pacman -S --noconfirm"
              elif command -v apk >/dev/null 2>&1; then
                  PACKAGE_MANAGER="apk"
                  INSTALL_CMD="apk add"
              elif command -v brew >/dev/null 2>&1; then
                  PACKAGE_MANAGER="brew"
                  INSTALL_CMD="brew install"
              else
                  error "No supported package manager found (apt, dnf, yum, pacman, apk, brew)"
              fi
              
              case "$OS-$ARCH" in
                linux-x86_64)
                  TARGET="x86_64-unknown-linux-gnu"
                  ;;
                linux-aarch64|linux-arm64)
                  TARGET="aarch64-unknown-linux-gnu"
                  ;;
                linux-armv7l)
                  TARGET="armv7-unknown-linux-gnueabihf"
                  ;;
                darwin-x86_64)
                  TARGET="x86_64-apple-darwin"
                  ;;
                darwin-arm64|darwin-aarch64)
                  TARGET="aarch64-apple-darwin"
                  ;;
                *)
                  error "Unsupported platform: $OS-$ARCH"
                  ;;
              esac
              
              info "Platform: $OS-$ARCH ($TARGET)"
              info "Package Manager: $PACKAGE_MANAGER"
          }
          
          # Install system dependencies
          install_dependencies() {
              step "Installing system dependencies..."
              
              case $PACKAGE_MANAGER in
                  apt)
                      apt-get update
                      apt-get install -y curl wget mosquitto mosquitto-clients openssl ca-certificates systemd
                      ;;
                  dnf)
                      dnf install -y curl wget mosquitto openssl ca-certificates systemd
                      ;;
                  yum)
                      yum install -y curl wget mosquitto openssl ca-certificates systemd
                      ;;
                  pacman)
                      pacman -S --noconfirm curl wget mosquitto openssl ca-certificates systemd
                      ;;
                  apk)
                      apk add curl wget mosquitto openssl ca-certificates openrc
                      ;;
                  brew)
                      brew install curl wget mosquitto openssl
                      ;;
              esac
              
              success "System dependencies installed"
          }
          
          # Create system user and directories
          create_system_user() {
              step "Creating aetheric system user and directories..."
              
              # Create group if it doesn't exist
              if ! getent group aetheric >/dev/null 2>&1; then
                  if command -v groupadd >/dev/null 2>&1; then
                      groupadd --system aetheric
                  elif command -v addgroup >/dev/null 2>&1; then
                      addgroup --system aetheric
                  else
                      error "No group creation command found (groupadd or addgroup)"
                  fi
                  success "Created aetheric group"
              else
                  info "Group aetheric already exists"
              fi
              
              # Create user if it doesn't exist
              if ! getent passwd aetheric >/dev/null 2>&1; then
                  if command -v useradd >/dev/null 2>&1; then
                      useradd --system --gid aetheric --no-create-home --shell /sbin/nologin --comment "Aetheric Edge Service" aetheric
                  elif command -v adduser >/dev/null 2>&1; then
                      adduser --system --ingroup aetheric --no-create-home --shell /sbin/nologin --gecos "Aetheric Edge Service" aetheric
                  else
                      error "No user creation command found (useradd or adduser)"
                  fi
                  success "Created aetheric system user"
              else
                  info "User aetheric already exists"
              fi
              
              # Create directories
              mkdir -p /etc/aetheric-edge
              mkdir -p /var/lib/aetheric-edge/{mosquitto,certs,plugins,temp}
              mkdir -p /var/log/aetheric-edge
              
              # Set permissions
              chown -R aetheric:aetheric /var/lib/aetheric-edge
              chown -R aetheric:aetheric /var/log/aetheric-edge
              chown -R aetheric:aetheric /etc/aetheric-edge
              
              chmod 755 /var/lib/aetheric-edge
              chmod 750 /var/lib/aetheric-edge/certs
              chmod 755 /var/log/aetheric-edge
              chmod 755 /etc/aetheric-edge
              
              success "System user and directories created"
          }
          
          # Download and install Aetheric Edge binaries
          install_aetheric() {
              step "Downloading and installing Aetheric Edge..."
              
              # Get download URL
              if [[ "$VERSION" == "latest" ]]; then
                DOWNLOAD_URL=$(curl -s "https://api.github.com/repos/$REPO/releases/latest" \
                  | grep -o "\"browser_download_url\":[[:space:]]*\"[^\"]*${TARGET}[^\"]*\.tar\.gz\"" \
                  | cut -d'"' -f4)
              else
                DOWNLOAD_URL="https://github.com/$REPO/releases/download/$VERSION/aetheric-$VERSION-$TARGET.tar.gz"
              fi
              
              if [[ -z "$DOWNLOAD_URL" ]]; then
                error "Could not find release for platform $TARGET"
              fi
              
              info "Downloading from: $DOWNLOAD_URL"
              
              # Download and install
              TEMP_DIR=$(mktemp -d)
              cd "$TEMP_DIR"
              
              curl -L -o aetheric.tar.gz "$DOWNLOAD_URL"
              tar -xzf aetheric.tar.gz
              
              # Find extracted directory
              EXTRACTED_DIR=$(find . -name "aetheric-*" -type d | head -n1)
              
              # Install binaries
              install -m 755 "$EXTRACTED_DIR/aetheric" /usr/local/bin/
              install -m 755 "$EXTRACTED_DIR/aetheric-agent" /usr/local/bin/
              
              # Copy systemd service files if they exist
              if [[ -d "$EXTRACTED_DIR/systemd" ]]; then
                  cp "$EXTRACTED_DIR/systemd"/*.service /etc/systemd/system/
                  success "Copied systemd service files"
              else
                  warn "Systemd service files not found in package"
              fi
              
              # Copy example configs if they exist
              if [[ -d "$EXTRACTED_DIR/examples" ]]; then
                  cp -r "$EXTRACTED_DIR/examples"/* /etc/aetheric-edge/ 2>/dev/null || true
              fi
              
              # Cleanup
              cd /
              rm -rf "$TEMP_DIR"
              
              success "Aetheric Edge binaries installed"
          }
          
          # Configure Mosquitto MQTT broker
          configure_mosquitto() {
              step "Configuring local MQTT broker (Mosquitto)..."
              
              # Stop default mosquitto service if running
              systemctl stop mosquitto 2>/dev/null || true
              systemctl disable mosquitto 2>/dev/null || true
              
              # Create Mosquitto configuration for Aetheric Edge
              cat > /etc/aetheric-edge/mosquitto.conf << 'MQTTEOF'
          # Aetheric Edge Local MQTT Broker Configuration
          
          # Basic settings
          pid_file /var/lib/aetheric-edge/mosquitto/mosquitto.pid
          persistence true
          persistence_location /var/lib/aetheric-edge/mosquitto/
          persistence_file mosquitto.db
          log_dest file /var/log/aetheric-edge/mosquitto.log
          log_type error
          log_type warning
          log_type notice
          log_type information
          log_timestamp true
          connection_messages true
          log_timestamp_format %Y-%m-%dT%H:%M:%S
          
          # Security
          allow_anonymous false
          password_file /etc/aetheric-edge/mosquitto.passwd
          
          # Local listener for Aetheric Edge
          listener 1883 localhost
          protocol mqtt
          
          # Message size limits
          message_size_limit 100000000
          
          # Connection limits
          max_connections 1000
          max_inflight_messages 100
          max_queued_messages 1000
          
          # Persistence settings
          autosave_interval 1800
          autosave_on_changes false
          persistent_client_expiration 2h
          
          # Bridge configuration will be added by setup command
          MQTTEOF
              
              # Create mosquitto password file
              touch /etc/aetheric-edge/mosquitto.passwd
              chown aetheric:aetheric /etc/aetheric-edge/mosquitto.passwd
              chmod 600 /etc/aetheric-edge/mosquitto.passwd
              
              success "Mosquitto configuration created"
          }
          
          # Install and enable systemd services
          install_services() {
              step "Installing and configuring systemd services..."
              
              # Reload systemd daemon
              systemctl daemon-reload
              
              # Enable services but don't start them yet
              systemctl enable mosquitto.service
              systemctl enable aetheric-agent.service
              
              success "Systemd services installed and enabled"
          }
          
          # Main installation
          main() {
              echo "========================================"
              echo "   Aetheric Edge Complete Installer   "
              echo "========================================"
              echo
              
              detect_platform
              install_dependencies
              create_system_user
              install_aetheric
              configure_mosquitto
              install_services
              
              echo
              success "=========================================="
              success "Aetheric Edge installation completed!"
              success "=========================================="
              echo
              info "Next steps:"
              info "1. Run setup: sudo aetheric setup"
              info "2. Start services: sudo systemctl start aetheric-mosquitto aetheric-agent"
              info "3. Check status: sudo systemctl status aetheric-agent"
              echo
              info "Installation details:"
              info "- Binaries: /usr/local/bin/aetheric, /usr/local/bin/aetheric-agent"
              info "- Configuration: /etc/aetheric-edge/"
              info "- Data directory: /var/lib/aetheric-edge/"
              info "- Log directory: /var/log/aetheric-edge/"
              info "- Services: aetheric-agent, aetheric-mosquitto"
              echo
              
              if [[ "$SETUP_MODE" == "prompt" ]]; then
                  echo -n "Would you like to run the setup wizard now? [y/N]: "
                  read -r response
                  if [[ "$response" =~ ^[Yy]$ ]]; then
                      info "Running setup wizard..."
                      /usr/local/bin/aetheric setup
                  else
                      warn "Setup skipped. Run 'sudo aetheric setup' when ready."
                  fi
              elif [[ "$SETUP_MODE" == "auto" ]]; then
                  info "Running automatic setup..."
                  /usr/local/bin/aetheric setup --yes
              fi
          }
          
          main "$@"
          EOF
          
          chmod +x installers/install.sh
          
          # Create Windows installer
          cat > installers/install.ps1 << 'EOF'
          # Aetheric Edge Windows Installation Script
          param(
              [string]$Version = "latest",
              [string]$InstallDir = "$env:ProgramFiles\AethericEdge"
          )
          
          $ErrorActionPreference = "Stop"
          $REPO = "Aetheric-Technology/Aetheric-Edge"
          
          function Write-Info { Write-Host "[INFO] $args" -ForegroundColor Green }
          function Write-Error { Write-Host "[ERROR] $args" -ForegroundColor Red; exit 1 }
          
          # Check admin
          $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
          $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
          if (-not $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
              Write-Error "This script must be run as Administrator"
          }
          
          # Detect architecture
          $arch = if ([Environment]::Is64BitOperatingSystem) { "x86_64" } else { Write-Error "32-bit Windows not supported" }
          $target = "x86_64-pc-windows-msvc"
          
          Write-Info "Installing Aetheric Edge for Windows ($target)"
          
          # Get download URL
          if ($Version -eq "latest") {
              $release = Invoke-RestMethod -Uri "https://api.github.com/repos/$REPO/releases/latest"
              $asset = $release.assets | Where-Object { $_.name -like "*$target*.zip" }
              $downloadUrl = $asset.browser_download_url
          } else {
              $downloadUrl = "https://github.com/$REPO/releases/download/$Version/aetheric-$Version-$target.zip"
          }
          
          Write-Info "Downloading from: $downloadUrl"
          
          # Download and extract
          $tempDir = New-TemporaryFile | ForEach-Object { Remove-Item $_; New-Item -ItemType Directory -Path $_ }
          $zipPath = Join-Path $tempDir "aetheric.zip"
          
          Invoke-WebRequest -Uri $downloadUrl -OutFile $zipPath
          Expand-Archive -Path $zipPath -DestinationPath $tempDir
          
          # Find extracted directory
          $extractedDir = Get-ChildItem -Path $tempDir -Directory | Where-Object { $_.Name -like "aetheric-*" } | Select-Object -First 1
          
          # Create install directory
          New-Item -ItemType Directory -Path $InstallDir -Force | Out-Null
          
          # Copy files
          Copy-Item -Path "$($extractedDir.FullName)\*.exe" -Destination $InstallDir -Force
          
          # Add to PATH
          $currentPath = [Environment]::GetEnvironmentVariable("PATH", "Machine")
          if ($currentPath -notlike "*$InstallDir*") {
              [Environment]::SetEnvironmentVariable("PATH", "$currentPath;$InstallDir", "Machine")
              Write-Info "Added $InstallDir to PATH"
          }
          
          # Cleanup
          Remove-Item -Path $tempDir -Recurse -Force
          
          Write-Info "Aetheric Edge installed successfully to $InstallDir"
          Write-Info "Restart your terminal to use 'aetheric' and 'aetheric-agent' commands"
          EOF
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*
            installers/*
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: true
          body: |
            ## Installation
            
            ### Quick Install
            
            **Linux/macOS:**
            ```bash
            curl -fsSL https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/install.sh | sudo bash -s ${{ steps.version.outputs.version }}
            ```
            
            **Windows (PowerShell as Administrator):**
            ```powershell
            Invoke-WebRequest -Uri "https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.version }}/install.ps1" -OutFile install.ps1
            .\install.ps1 -Version ${{ steps.version.outputs.version }}
            ```
            
            ### Manual Installation
            
            Download the appropriate binary archive for your platform from the assets below.
            
            ### Supported Platforms
            
            - **Linux**: x86_64, aarch64 (ARM64), armv7, i686, musl
            - **Windows**: x86_64, aarch64 (ARM64)
            - **macOS**: x86_64 (Intel), aarch64 (Apple Silicon)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Success gate
  success:
    name: All Builds Successful
    if: success()
    needs: [build]  # Only depends on build since checks are disabled
    runs-on: ubuntu-latest
    steps:
      - name: Mark success
        run: echo "All builds completed successfully!"